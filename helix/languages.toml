########
# scls #
########
[language-server.scls]
command = "simple-completion-language-server"

[language-server.scls.config]
max_completion_items = 100           # set max completion results len for each group: words, snippets, unicode-input
feature_words = true                 # enable completion by word
feature_snippets = true              # enable snippets
snippets_first = true                # completions will return before snippets by default
snippets_inline_by_word_tail = false # suggest snippets by WORD tail, for example text `xsq|` become `x^2|` when snippet `sq` has body `^2`
feature_unicode_input = false        # enable "unicode input"
feature_paths = false                # enable path completion
feature_citations = false            # enable citation completion (only on `citation` feature enabled)

[language-server.scls.environment]
RUST_LOG = "info,simple-completion-language-server=info"
LOG_FILE = "/tmp/completion.log"

[[language]]
name = "stub"
scope = "text.stub"
file-types = []
shebangs = []
roots = []
auto-format = false
language-servers = ["scls"]
############
# scls end #
############

#########
# astro #
#########
[[language]]
name = "astro"
auto-format = false
scope = "source.astro"
injection-regex = "astro"
file-types = ["astro"]
language-servers = ["astro-ls"]

[language-server.astro-ls]
command = "astro-ls"
args = ["--stdio"]
# config = { typescript = { tsdk = "/Users/victorlisboa/.npm-global/lib/node_modules/typescript/lib" } }
config = { typescript = { tsdk = "/Users/victorlisboa/.local/share/mise/installs/node/22.14.0/lib/node_modules/typescript/lib" } }
#############
# astro end #
#############

########
# rust #
########
[[language]]
name = "rust"
auto-format = false
language-servers = ["scls", "rust-analyzer"]

[language-server.rust-analyzer.config]
check.command = "clippy"
############
# rust end #
############

[[language]]
name = "zig"
auto-format = false
language-servers = ["scls", "zls"]

[[language]]
name = "go"
auto-format = false
language-servers = ["scls", "gopls"]

#######
# sql #
#######
[[language]]
name = "sql"
auto-format = false
language-servers = ["scls", "sqls"]

[language-server.sqls]
command = "sqls"
args = []
###########
# sql end #
###########

[[language]]
name = "scheme"
auto-format = false
language-servers = ["steel-language-server"]

[language-server.steel-language-server]
command = "steel-language-server"
args = []

[[language]]
name = "html"
formatter = { command = 'prettier', args = ["--parser", "html"] }
auto-format = false

[[language]]
name = "typescript"
language-servers = ["scls", "typescript-language-server", "eslint"]
formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
auto-format = false

[[language]]
name = "javascript"
language-servers = [
  "scls",
  "typescript-language-server",
  "tailwindcss-react",
  "eslint",
]
formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
auto-format = false

[[language]]
name = "jsx"
language-servers = [
  "scls",
  "typescript-language-server",
  "tailwindcss-react",
  "eslint",
]
formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
auto-format = false

[[language]]
name = "tsx"
language-servers = [
  "typescript-language-server",
  "scls",
  "tailwindcss-react",
  "eslint",
]
formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
auto-format = false

[[language]]
name = "python"
language-servers = ["ruff", "basedpyright", "scls"]

[language-server.ruff]
command = "ruff"
args = ["server"]

[language-server.basedpyright]
command = "basedpyright-langserver"
args = ["--stdio"]

[language-server.basedpyright.config]
basedpyright.analysis.diagnosticMode = "openFilesOnly"

[language-server.eslint]
args = ["--stdio"]
command = "vscode-eslint-language-server"
display-messages = true

# Configuration reference: https://github.com/microsoft/vscode-eslint?tab=readme-ov-file#settings-options
[language-server.eslint.config]
format = true
nodePath = ""
onIgnoredFiles = "off"
packageManager = "yarn"
quiet = false
rulesCustomizations = []
run = "onType"
useESLintClass = false
validate = "on"
codeAction = { disableRuleComment = { enable = true, location = "separateLine" }, showDocumentation = { enable = true } }
codeActionOnSave = { mode = "all" }
experimental = {}
problems = { shortenToSingleLine = false }
workingDirectory = { mode = "auto" }
# roots = []

# [language-server.eslint.config]
# validate = "on"
# run = "onType"
# workingDirectory.mode = "location"
# experimental = { useFlatConfig = true }
# format.enable = false
# nodePath = ""

# Rules/actions/reporting configuration
# rulesCustomizations = [{ rule = "*", severity = "warn" }]
# codeActionOnSave.enable = false
# codeAction.disableRuleComment = { enable = true, location = "separateLine" }
# codeAction.showDocumentation.enable = true
# problems = { shortenToSingleLine = true }

###########
# BiomeJS #
###########
# [language-server.biome]
# command = "biome"
# args = ["lsp-proxy"]
# display-messages = true
# roots = ["biome.jsonc", "biome.json"]

# [[language]]
# name = "typescript"
# language-servers = [
#   { name = 'biome' },
#   { name = 'typescript-language-server', except-features = [
#     'format',
#   ] },
# ]
# auto-format = false
# formatter = { command = "biome", args = [
#   "format",
#   "--stdin-file-path",
#   "a.ts",
# ] }

# [[language]]
# name = "tsx"
# language-servers = [
#   { name = 'biome' },
#   { name = 'typescript-language-server', except-features = [
#     'format',
#   ] },
#   { name = 'tailwindcss-react' },
# ]
# auto-format = false
# formatter = { command = "biome", args = [
#   "format",
#   "--stdin-file-path",
#   "a.tsx",
# ] }

# [[language]]
# name = "jsx"
# language-servers = [
#   { name = 'biome' },
#   { name = 'typescript-language-server', except-features = [
#     'format',
#   ] },
#   { name = 'tailwindcss-react' },
# ]
# auto-format = true
# formatter = { command = "biome", args = [
#   "format",
#   "--stdin-file-path",
#   "a.jsx",
# ] }

# [[language]]
# name = "javascript"
# language-servers = [
#   { name = "typescript-language-server", except-features = [
#     "format",
#   ] },
#   "biome",
# ]
# auto-format = false

# [[language]]
# name = "json"
# language-servers = [
#   { name = "vscode-json-language-server", except-features = [
#     "format",
#   ] },
#   "biome",
# ]
###############
# BiomeJS end #
###############

############
# Tailwind #
############
[language-server.tailwindcss-react]
language-id = "typescriptreact"
command = "tailwindcss-language-server"
args = ["--stdio"]
config = {}
################
# Tailwind end #
################

[[language]]
name = "markdown"
formatter = { command = "deno", args = ["fmt", "-", "‚Äîext", "md"] }
auto-format = false

[[language]]
name = "toml"
auto-format = false

[[language]]
name = "bash"
auto-format = true

# Jabba on its way of being the most terrible digusting programming language ever be like: ‚òïÔ∏èüòéü§ô
[[language]]
name = "java"
roots = ["pom.xml", "build.gradle"]
language-servers = ["jdtls", "scls"]
auto-format = false

# TODO Use $HOME to remove /Users/...
[language-server.jdtls]
command = "jdtls"
args = [
  "--jvm-arg=-javaagent:/Users/victorlisboa/.m2/repository/org/projectlombok/lombok/1.18.32/lombok-1.18.32.jar",
]
timeout = 100

########
# YAML #
########
[[language]]
name = "yaml"
file-types = ["yaml", "yml"]
language-servers = ["yaml-language-server"]

[language-server.yaml-language-server]
config = { yaml = { schemas = { kubernetes = "/*.y{a,}ml" }, format = { enable = true } } }
############
# YAML end #
############
